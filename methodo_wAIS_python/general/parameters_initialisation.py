from typing import Optional
from numpy.typing import NDArray
from custom_typing.custom_types import ParamsInitiaux
from distribution_family.distribution_family import DistributionFamily
# Debug
from utils.log import logstr
from logging import info, debug, warn, error
from utils.print_array_as_vector import get_vector_str




def initialisation(q : DistributionFamily, 
                   …õ : float, 
                   Œ∏_0 : Optional[NDArray], 
                   N : int, 
                   ùõæ : float, 
                   Œ∑_0 : float, 
                   benchmark : bool, 
                   ) -> ParamsInitiaux:
    """initialisationdes param√®tres pour la SGA de la fonction L
    
    
    Inputs : 
    
        q                               ‚Äî original sampling policy : q(ùë•, Œ∏)
        
        …õ                               ‚Äî threshold pour la norme du gradient
        
        Œ∏_0                             ‚Äî initialisation des param√®tres
        
        nb_drawn_samples (N)            ‚Äî Nombre de samples tir√©s par la distribution q √† chaque it√©ration
        
        nb_stochastic_choice (ùõæ)        ‚Äî nombre d'observations √† tirer al√©atoirement
        
        step (Œ∑_0)                      ‚Äî initialisation du pas
        
        benchmark                       - if True, produces error graphs




    Return :
    
        Œ∑_t, Œ∏_t, norm_grad_L, X, q_0, counter, benchmark_graph, state
        
        Œ∑_t             : float
        Œ∏_t             : NDArray
        norm_grad_L     : float
        X               : list[float]
        q_0             : DistributionFamily
        benchmark_graph : list[list[float]] | None
        state           : list[bool]
    
    """
    
    """TYPES DEFINITION"""
    Œ∑_t             : float
    Œ∏_t             : NDArray
    norm_grad_L     : float
    X               : list[float]
    q_0             : DistributionFamily
    counter         : int
    benchmark_graph : list[list[float]] | None
    state           : list[bool]
    
    # initialisation
    Œ∑_t = Œ∑_0
    if Œ∏_0 is None :
        Œ∏_0 = q.parameters_list()
        Œ∏_t = q.parameters_list()
    else :
        Œ∏_t = Œ∏_0
        q.update_parameters(Œ∏_0)
    
    # on s'assure de commencer la premi√®re it√©ration
    norm_grad_L = (…õ + 1)
    
    X = []
    
    debug(logstr(
        f"\nŒ∑_t = {Œ∑_t}\nŒ∏_t = {Œ∏_t}\nùõæ = {ùõæ}\nN = {N}\n"
                ))
    
    #! importance sampling selon q(Œ∏_0)
    q_0 = q.copy()
        
    
    if benchmark is True :
        benchmark_graph = [ list([]) for k in range( len(Œ∏_t) + 2)]
        #                                                     + 1
        #                                            if you don't want to include
        #                                            the graph (inter, L(Œ∏)) 
    else :
        benchmark_graph = None

    state = [False for k in range(3)]
    
    return Œ∑_t, Œ∏_t, norm_grad_L, X, q_0, benchmark_graph, state
